---
- hosts: ubuntu
  become: true
  become_user: root
  vars:
    memsize_kb: 2035000
    minimal_number_cpus: 2
  vars_files:
    - vars.yaml
  tasks:
    - name: Check size of memory
      ansible.builtin.script: helpers/mem.py {{memsize_kb}}
    - name: Check number of CPUs
      ansible.builtin.script: helpers/cpu.py {{minimal_number_cpus}}
    - name: Disable swap for kubelet (see hints on kubernetes.io)
      ansible.builtin.script: helpers/turn-off-swap.sh
    - name: Fetch produc_uuid
      ansible.builtin.fetch:
        src: "{{path_product_uuid}}"
        dest: /tmp/product_uuid
    - name: Fetch machine ID 
      ansible.builtin.fetch:
        src: "{{path_machine_id}}"
        dest: /tmp/machine-id
    - name: Show interfaces
      ansible.builtin.debug:
        msg: "{{item}}"
      loop: "{{ ansible_interfaces }} "

- name: Check uniqness
  hosts: localhost
  connection: local
  vars_files:
      - vars.yaml
  tasks:
    - name: Show product UUIDs
      ansible.builtin.command: cat "/tmp/product_uuid/{{ item }}{{path_product_uuid}}"
      loop: "{{ groups['all'] }}"
    - name: Show machine IDs
      ansible.builtin.command: cat "/tmp/machine-id/{{ item }}{{path_machine_id}}"
      loop: "{{ groups['all'] }}"

- name: Enable Cgroup2
  ansible.builtin.import_playbook: ../enable-cgroup2/playbook.yaml

- hosts: ubuntu
  become: true
  become_user: root
  vars_files:
    - vars.yaml
  tasks:
    - name: Letting iptables see bridged traffic
      ansible.builtin.script: helpers/letting-iptables-see-bridged-traffic.sh
    - name: Install Docker
      ansible.builtin.script: ../install-docker/ubuntu/install.sh
    - name: Prerequisites for kube* tools
      ansible.builtin.apt:
        update_cache: true
        pkg:
        - apt-transport-https
        - ca-certificates 
        - curl

    - name: Download the Google Cloud public signing key
      get_url:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        dest: /usr/share/keyrings/kubernetes-archive-keyring.gpg 

    - name: Add the Kubernetes apt repository
      ansible.builtin.apt_repository:
        repo: deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main
        state: present

    - name: Install kubelet, kubectl, kubeadm
      ansible.builtin.apt:
        update_cache: true
        pkg:
          - kubeadm={{k8s_version}}
          - kubectl={{k8s_version}}
          - kubelet={{k8s_version}}
        allow_downgrade: yes

    - name: Hold kubeadm
      dpkg_selections:
        name: kubeadm
        selection: hold
    - name: Hold kubectl
      dpkg_selections:
        name: kubectl
        selection: hold
    - name: Hold kubelet
      dpkg_selections:
        name: kubelet
        selection: hold


- hosts: ubuntu
  name: Create K8s cluster with kubeadm
  become: true
  become_user: root
  tasks:
    - debug:
        var: ansible_facts
    - copy: 
        dest: /tmp/asdf
        content: |
          {% for addr in ansible_facts.all_ipv4_addresses %}
          {{addr}}   {{ansible_facts.hostname}}
          {% endfor %}
    - ansible.builtin.shell: kubeadm init --pod-network-cidr 10.244.0.0/16 --apiserver-advertise-address={{ansible_eth1.ipv4.address}}
    - ansible.builtin.shell: mkdir -p /home/vagrant/.kube
    - ansible.builtin.shell: cp /etc/kubernetes/admin.conf /home/vagrant/.kube/config
    - ansible.builtin.shell: chown -R {{ansible_user}}. /home/vagrant/.kube
    - name: Download foo.conf
      get_url:
        url: https://docs.projectcalico.org/manifests/calico.yaml
        dest: /tmp/calico.yaml
        mode: '0440'
    - name: Install network plugin
      ansible.builtin.shell: KUBECONFIG=/etc/kubernetes/admin.conf kubectl apply -f /tmp/calico.yaml
    - name: Untaint control-plane such that pods can be scheduled
      ansible.builtin.shell: KUBECONFIG=/etc/kubernetes/admin.conf kubectl taint nodes --all node-role.kubernetes.io/master-
...
# Untaint master
# kubectl taint nodes --all node-role.kubernetes.io/master-
#
# Build kubeadm join command:
# openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //'
# kubeadm token list
# kubeadm join 192.168.99.200:6443 --token=8niebf.ehlln5d8p7d4hfj8 --discovery-token-ca-cert-hash sha256:7e545e6c5923b44bd70a8b983581a9edfcdd75a4bac4560927df15fc56e9a70d

# Get versions for kubeadm, ...
# curl -s https://packages.cloud.google.com/apt/dists/kubernetes-xenial/main/binary-amd64/Packages | grep Version | awk '{print $2}'
